// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Fetch = require("bs-fetch/src/Fetch.js");
var React = require("react");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var RR$ReactTemplate = require("../RR.bs.js");
var Const$ReactTemplate = require("../const/Const.bs.js");

function books(books$1) {
  return Json_decode.field("books", (function (param) {
                return Json_decode.array(Const$ReactTemplate.booktypes, param);
              }), books$1);
}

var Decode = /* module */[/* books */books];

function fetchWithHeader(body) {
  return fetch(Const$ReactTemplate.api + "/search", Fetch.RequestInit[/* make */0](/* Post */2, {
                    Accept: "application/json",
                    Authorization: "myreadrelocal123123",
                    "Content-Type": "application/json"
                  }, Js_primitive.some(JSON.stringify(body)), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* () */0));
}

var component = ReasonReact.reducerComponent("Search");

function make(_, _$1) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              console.log(self[/* state */1]);
              var match = self[/* state */1];
              return React.createElement("div", {
                          className: "search-books"
                        }, React.createElement("div", {
                              className: "search-books-bar"
                            }, React.createElement("a", {
                                  className: "close-search",
                                  href: "/"
                                }, RR$ReactTemplate.string("Close")), React.createElement("div", {
                                  className: "search-books-input-wrapper"
                                }, React.createElement("input", {
                                      name: "searchQuery",
                                      placeholder: "Search by title or author",
                                      type: "text",
                                      onChange: (function ($$event) {
                                          return Curry._1(self[/* send */3], /* FetchBooks */Block.__(1, [$$event.target.value]));
                                        })
                                    }))), React.createElement("div", {
                              className: "search-books-results"
                            }, match ? (console.log(match[0]), React.createElement("p", undefined, RR$ReactTemplate.string("favorite books"))) : React.createElement("p", undefined, RR$ReactTemplate.string("Enter something in above search box and press enter to search for your favorite books"))));
            }),
          /* initialState */(function () {
              return /* Loading */0;
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, _) {
              if (action.tag) {
                var value = action[0];
                return /* SideEffects */Block.__(1, [(function () {
                              var body = { };
                              body["query"] = value;
                              fetchWithHeader(body).then((function (prim) {
                                        return prim.json();
                                      })).then((function (item) {
                                      var item$1 = books(item);
                                      return Promise.resolve((console.log(item$1), /* () */0));
                                    }));
                              return /* () */0;
                            })]);
              } else {
                return /* Update */Block.__(0, [/* Books */[action[0]]]);
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.Decode = Decode;
exports.fetchWithHeader = fetchWithHeader;
exports.component = component;
exports.make = make;
/* component Not a pure module */
